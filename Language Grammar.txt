/* stuff to add:
 *   for loop
 *   loop labels
 *   tuples/list/dictionary literals
 *   ++ or -- expressions
 *   ** power operator, bit shift operators
 *   hex/octal/binary constants
 *   objects/classes
 *   typing
 *
 * stuff never to be done (will be dealt with in preprocessing):
 *   comment
 */

Program	: (Script_Line Newline)*
        ;

/*
 *	Simple Statement Lines
 */

Script_Line : Empty_Line
            | Assignment_Stmt
            | Print_Stmt
            | Assert_Stmt
            | Expression
            | Compound_Stmt
            ;

Assignment_Stmt : Reference (", " Reference)* " = " Expression (", " Expression)*
                | Reference (" += " | " -= " | " *= " | " /= ") Expression
                ;

Print_Stmt : ("println " | "print ") (Expression (", " Expression)*)?
           ;

Assert_Stmt : "assert " Boolean_Expr (" : " Expression)?
            ;

Break_Stmt : "break"
           ;

Continue_Stmt : "continue"
              ;

Return_Stmt : "return" (" " Expression)?
            ;

Empty_Line :
           ;

/*
 *	Compound Statement Lines
 */

Compound_Stmt : If_Expr
              | For_Expr
              | While_Expr
              | Func_Expr
              | Class_Expr
              ;

If_Expr : "If " Boolean_Expr ":" Newline Block ("ElseIf " Boolean_Expr ":" Newline Block)* ("Else:" Newline Block)?
        ;

While_Expr : "While " Boolean_Expr ":" Newline Loop_Block ("Else:" Newline Loop_Block)?
           ;

Func_Expr : "def " (Func_Modifier " ")* Identifier "(" (Func_Parameter (", " Func_Parameter)*)? "):" Newline Func_Internals
          ;

Class_Expr : "class " Identifier ":" Newline Class_Internals
           ;

Func_Parameter : Identifier (" = " Expression)?
          ;

/*
 *  Indentation
 */

{
  /* semantics */
  int indentation_level = 0;
}

Newline : "\n" Tabs
        ;

Tabs : "\t"* { assert "\t".count == indentation_level; }
     ;

Indent : { indentation_level++; }
       ;

Dedent : { dedentation_level++; }
       ;

/*
 *	Block Statements
 */

Loop_Block : Indent ((Script_Line | Break_Stmt | Continue_Stmt) Newline)* Dedent "End"

Func_Internals : Indent ((Script_Line | Return_Stmt) Newline)* Dedent "End"

Class_Internals : // unimplemented

/*
 *	Function Calls
 */

Call : Identifier "(" (Expression (", " Expression)*)? ")"
     | Integer_Expr " " Integer_Op " " Integer_Expr
     | Boolean_Expr " " Boolean_Op " " Integer_Expr
     | String_Expr " " String_Op " " String_Expr
     ;

Integer_Op : "+" | "-" | "*" | "/" | "%"
           ;

Boolean_Op : "and" | "or" | "xor"
           ;

String_Op : "+"
          ;

/*
 *	Expressions
 */

Reference : Identifier
          | Identifier "(" Expression ")"
          | Identifier "[" Expression "]"
          | Identifier "{" Expression "}"
          ;

Expression : Integer_Expr
           | Boolean_Expr
           | String_Expr
           | Call
           | "(" Expression ")"
           ;

Integer_Expr : Reference
             | Call
             | Integer_Constant
             | "(" Integer_Expr ")"
             ;

Integer_Constant : ("0" .. "9")+

Boolean_Expr : Reference
             | Call
             | "True"
             | "False"
             | "not " Boolean_Expr
             | "(" Boolean_Expr ")"
             ;

String_Expr : Reference
            | Call
            | String_Literal
            | "(" String_Expr ")"
            ;

String_Literal : "\"" (*) "\""

Identifier : (*)